generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  //@@index([userId])
}


//Will be removed in the future
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("sessions")
  //@@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  password      String?
  phoneVerified Boolean?      @default(false) @map("phone_verified")
  phoneNumber   String?
  paymentId     String?
  role          Role          @default(BUYER)
  cart          Cart?
  seller        Seller?
  accounts      Account[]
  sessions      Session[]
  Participant   Participant[]
  Message       Message[]
  orderItems    OrderOnItem[]
  orders        Order[]
  Appointment   Appointment[]
  tokens UserNotificationToken[]

  @@map("users")
}

model UserNotificationToken {
  userId String 
  token String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@id([userId, token])
  @@index([userId])
}

model Seller {
  id                    String               @id @default(cuid())
  phoneNumber           String?
  school                String
  latitude              Float?
  longitude             Float?
  subAccountID          String?
  downPaymentPercentage Float?
  user                  User                 @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Category              Category[]
  services              Seller_Service[]
  availability          SellerAvailability[]
  Appointment           Appointment[]

  
}

model SellerAvailability {
  id          String        @id @default(cuid())
  from        Int
  to          Int
  day         Day
  enabled     Boolean       @default(true)
  sellerId    String
  seller      Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Appointment Appointment[]

  
}

model Seller_Service {
  id          String @id @default(cuid())
  serviceName String
  seller      Seller @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Participant {
  id     String @id @default(cuid())
  userId String
  roomId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, roomId])
  
}

model Room {
  id          String        @id @default(cuid())
  name        String?
  Participant Participant[]
  Message     Message[]
  type        RoomType
}

model Message {
  id      String   @id @default(cuid())
  roomId  String
  userId  String
  message String   @db.Text
  sendAt  DateTime
  user    User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  room    Room     @relation(fields: [roomId], references: [id], onUpdate: Cascade)

  @@unique([roomId, sendAt])
  @@index([userId, roomId])
}

model Category {
  id       String     @id @default(cuid())
  name     String
  Image    Image[]
  prices   Price[]
  sellerId String
  type     Commodity? @default(GOOD)
  seller   Seller     @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([name, sellerId])
  //@@index([sellerId])
}

model Image {
  id         String   @id @default(cuid())
  link       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  //@@index([categoryId])
}

model Price {
  id           String         @id @default(cuid())
  name         String
  amount       Float
  categoryId   String
  duration     Int? //If price(product) is a service
  type         Commodity?     @default(GOOD)
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CartOnPrices CartOnPrices[]
  OrderOnItem  OrderOnItem[]
  Appointment  Appointment[]

  //@@index([categoryId])
}

model Order {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  userId        String
  codeId        String?
  paymentIntent String?
  user          User          @relation(fields: [userId], references: [id])
  code          Code?         @relation(fields: [codeId], references: [id])
  OrderOnItem   OrderOnItem[]

  //@@index([userId])
  //@@index([codeId])
}

model OrderOnItem {
  id                      String      @id @default(cuid())
  priceId                 String
  orderId                 String?
  codeId                  String?
  userId                  String
  type                    OrderType   @default(PICKUP)
  estimatedCompletionTime DateTime?
  status                  OrderStatus @default(PENDING)
  quantity                Int
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @default(now())
  price                   Price       @relation(fields: [priceId], references: [id])
  user                    User        @relation(fields: [userId], references: [id])
  order                   Order?      @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  //@@index([priceId])
  //@@index([userId])
//@@index([orderId])
}

model Appointment {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  status               OrderStatus        @default(PENDING)
  appointmentDate      DateTime?
  sellerAvailabilityId String
  userId               String
  sellerId             String
  priceId              String
  codeId               String?
  paymentIntent        String?
  canceler             Role?
  cancellationReason   String?            @db.Text
  user                 User               @relation(fields: [userId], references: [id])
  seller               Seller             @relation(fields: [sellerId], references: [id])
  price                Price              @relation(fields: [priceId], references: [id])
  code                 Code?              @relation(fields: [codeId], references: [id])
  timeslot             SellerAvailability @relation(fields: [sellerAvailabilityId], references: [id])

  //@@index([userId])
  //@@index([codeId])
  //@@index([priceId])
  //@@index([sellerId])
  //@@index([sellerAvailabilityId])
}

//Shopping Cart Schema
model Cart {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CartOnPrices CartOnPrices[]

  //@@index([id])
}

model CartOnPrices {
  priceId   String
  cartId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id])
  price     Price    @relation(fields: [priceId], references: [id])

  @@id([priceId, cartId])
 // @@index([cartId])
  //@@index([priceId])
}

model Code {
  id          String        @id @default(cuid())
  code        String
  active      Boolean
  type        CodeType
  value       Float
  limit       Int
  orders      Order[]
  Appointment Appointment[]
}

model Waitlist {
  email    String   @id
  joinedAt DateTime @default(now())
}

enum Commodity {
  GOOD
  SERVICE
}

enum CodeType {
  PERCENT
  FLAT
}

enum OrderType {
  PICKUP
  DELIVERY
}

enum OrderStatus {
  CREATED
  PENDING
  APPROVED
  DECLINED
  DOWNPAID
  PAID
  FAILED
  COMPLETED
  CANCELED
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum RoomType {
  PRIVATE
  GROUP
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
